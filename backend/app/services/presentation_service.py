import os
import uuid
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
import logging
from typing import Dict, List
from app.core.config import settings

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PresentationService:
    def __init__(self):
        self.output_dir = os.path.join(settings.UPLOAD_DIR, "presentations")
        os.makedirs(self.output_dir, exist_ok=True)
    
    def create_presentation(self, presentation_data: Dict, filename: str = None) -> str:
        """Create PowerPoint presentation from structured data"""
        try:
            # Create presentation
            prs = Presentation()
            
            # Set slide size (16:9 aspect ratio)
            prs.slide_width = Inches(13.33)
            prs.slide_height = Inches(7.5)
            
            # Create title slide
            title_slide_layout = prs.slide_layouts[0]  # Title slide layout
            title_slide = prs.slides.add_slide(title_slide_layout)
            
            # Set title
            title = title_slide.shapes.title
            title.text = presentation_data.get("title", "Generated Presentation")
            
            # Style title
            title_paragraph = title.text_frame.paragraphs[0]
            title_paragraph.font.size = Pt(44)
            title_paragraph.font.bold = True
            title_paragraph.font.color.rgb = RGBColor(31, 73, 125)  # Dark blue
            title_paragraph.alignment = PP_ALIGN.CENTER
            
            # Add subtitle if available
            if title_slide.shapes.placeholders[1]:
                subtitle = title_slide.shapes.placeholders[1]
                subtitle.text = "Generated by TextIQ"
                subtitle_paragraph = subtitle.text_frame.paragraphs[0]
                subtitle_paragraph.font.size = Pt(20)
                subtitle_paragraph.font.color.rgb = RGBColor(89, 89, 89)  # Gray
                subtitle_paragraph.alignment = PP_ALIGN.CENTER
            
            # Create content slides
            slides_data = presentation_data.get("slides", [])
            
            for slide_data in slides_data:
                # Use bullet slide layout
                bullet_slide_layout = prs.slide_layouts[1]
                slide = prs.slides.add_slide(bullet_slide_layout)
                
                # Set slide title
                slide_title = slide.shapes.title
                slide_title.text = slide_data.get("title", f"Slide {slide_data.get('slide_number', 1)}")
                
                # Style slide title
                title_paragraph = slide_title.text_frame.paragraphs[0]
                title_paragraph.font.size = Pt(32)
                title_paragraph.font.bold = True
                title_paragraph.font.color.rgb = RGBColor(31, 73, 125)
                
                # Add content
                content_placeholder = slide.shapes.placeholders[1]
                text_frame = content_placeholder.text_frame
                text_frame.clear()  # Clear default text
                
                content_items = slide_data.get("content", [])
                
                for i, item in enumerate(content_items):
                    if i == 0:
                        # First paragraph
                        p = text_frame.paragraphs[0]
                    else:
                        # Add new paragraph
                        p = text_frame.add_paragraph()
                    
                    p.text = item
                    p.level = 0  # Main bullet point
                    p.font.size = Pt(18)
                    p.font.color.rgb = RGBColor(64, 64, 64)  # Dark gray
                    p.space_after = Pt(12)
                
                # Add speaker notes if available
                speaker_notes = slide_data.get("speaker_notes", "")
                if speaker_notes:
                    notes_slide = slide.notes_slide
                    notes_text_frame = notes_slide.notes_text_frame
                    notes_text_frame.text = speaker_notes
            
            # Generate filename if not provided
            if not filename:
                filename = f"presentation_{uuid.uuid4().hex[:8]}.pptx"
            elif not filename.endswith('.pptx'):
                filename += '.pptx'
            
            # Save presentation
            file_path = os.path.join(self.output_dir, filename)
            prs.save(file_path)
            
            logger.info(f"Presentation created: {filename}")
            return file_path
            
        except Exception as e:
            logger.error(f"Error creating presentation: {str(e)}")
            raise Exception(f"Failed to create presentation: {str(e)}")
    
    def get_presentation_info(self, file_path: str) -> Dict:
        """Get information about a presentation file"""
        try:
            if not os.path.exists(file_path):
                return {"exists": False}
            
            prs = Presentation(file_path)
            
            return {
                "exists": True,
                "slide_count": len(prs.slides),
                "file_size": os.path.getsize(file_path),
                "filename": os.path.basename(file_path)
            }
            
        except Exception as e:
            logger.error(f"Error getting presentation info: {str(e)}")
            return {"exists": False, "error": str(e)}

# Global service instance
presentation_service = PresentationService()
